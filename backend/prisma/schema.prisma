generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  permissions RolePermission[]
  users       User[]
}

model User {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  email       String      @unique
  userName    String      @unique
  phone       String?
  password    String
  status      Boolean?
  roleId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  enabled     Boolean     @default(true)
  role        Role        @relation(fields: [roleId], references: [id])
  photo       UserImage[] @relation("UserImages")
  maps        Map[]       
  templates   Template[]  @relation("UserTemplates")
  contacts    Contact[]   @relation("ContactUser")
  userContacts Contact[]  @relation("UserContacts")

  @@index([roleId], map: "User_roleId_fkey")
}

model UserImage {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserImages", fields: [userId], references: [id])

  @@index([userId])
}

model Contact {
  id         String   @id @default(uuid())
  userId     String   // Usuario que tiene este contacto
  user       User     @relation("UserContacts", fields: [userId], references: [id])
  contactId  String   // Usuario que es el contacto
  contact    User     @relation("ContactUser", fields: [contactId], references: [id])
  status     String   @default("pending") // "pending", "accepted", "blocked"
  createdAt  DateTime @default(now())

  @@unique([userId, contactId])
}

model Template {
  id           String   @id @default(uuid())
  name         String
  description  String?
  visibility   String   @default("private") // "public" o "private"
  createdById  String
  createdBy    User     @relation("UserTemplates", fields: [createdById], references: [id])
  map          Map[]
  layers       TemplateLayer[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TemplateLayer {
  id         String   @id @default(uuid())
  name       String
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  pins       TemplatePin[]
  drawings   TemplateDrawing[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TemplatePin {
  id         String   @id @default(uuid())
  title      String
  description String?
  position   Json      // Coordenadas: {x: 10, y: 20}
  templateLayerId String
  templateLayer   TemplateLayer @relation(fields: [templateLayerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TemplateDrawing {
  id         String   @id @default(uuid())
  type       String   // "line", "shape"
  data       Json     // Datos del dibujo
  templateLayerId String
  templateLayer   TemplateLayer @relation(fields: [templateLayerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Map {
  id           String   @id @default(uuid())
  name         String
  description  String?
  enabled      Boolean  @default(true)
  visibility   String   @default("private") // "public" o "private"
  templateId   String?  // Si el mapa fue creado desde una plantilla
  template     Template? @relation(fields: [templateId], references: [id])
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id])
  layers       Layer[]
  sharedMaps   SharedMap[]
  imageId      String?
  image        Image[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Layer {
  id        String   @id @default(uuid())
  name      String
  mapId     String
  order     Int
  map       Map      @relation(fields: [mapId], references: [id])
  pins      Pin[]
  drawings  Drawing[]
  imageId   String?
  image     Image[]
  cellSize  Int?     @default(50)
  cellColor String?  @default("#6b7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pin {
  id          String   @id @default(uuid())
  title       String
  description String?
  position    Json     // To store coordinates, e.g., {x: 10, y: 20}
  layerId     String
  layer       Layer    @relation(fields: [layerId], references: [id])
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Drawing {
  id        String   @id @default(uuid())
  type      String   // e.g., "line", "shape"
  data      Json     // Store the drawing data
  layerId   String
  layer     Layer    @relation(fields: [layerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model SharedMap {
  id        String   @id @default(uuid())
  mapId     String
  map       Map      @relation(fields: [mapId], references: [id])
  token     String   @unique // Unique link for public sharing
  editable  Boolean  @default(false) // Whether the link allows editing
  createdAt DateTime @default(now())
}

model Image {
  id         String   @id @default(uuid())
  url        String
  thumbnail  String?
  filetype   String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  mapId      String?
  map        Map? @relation(fields: [mapId], references: [id])

  pinId      String?
  pin        Pin? @relation(fields: [pinId], references: [id])

  layerId    String?
  layer      Layer? @relation(fields: [layerId], references: [id])
}